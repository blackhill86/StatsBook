[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistics, psychology, and other stories",
    "section": "",
    "text": "1 Preface"
  },
  {
    "objectID": "index.html#welcome-to-my-lab-book",
    "href": "index.html#welcome-to-my-lab-book",
    "title": "Statistics, psychology, and other stories",
    "section": "1.1 Welcome to my lab book!",
    "text": "1.1 Welcome to my lab book!\nI’m excited to share R exercises, and cutting edge strategies to analyze data sets based on interesting hypothesis. This book is oriented to teach basics in R language for undergraduate students at California State University, Stanislaus. It is likely that the content and exercises will change every semester. This is a book in constant progress, and the changes will be based on my experience teaching PSYC 3000 Experimental Methods & Design."
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "Statistics, psychology, and other stories",
    "section": "1.2 How to use this book?",
    "text": "1.2 How to use this book?\nEach chapter is located in the left panel where you will be able to click the chapter you need to revise. All chapters will contain examples and questions that will be helpful to understand different features and options in R. ’\nI advise to check the book every week because I will update the chapters as the class progresses over the semester. I hope at some point to stop making changes, but given that this is a beta version, content might change.\nIf you have any question, or if you’d like make recommendations please send me an email at emontenegro1@csustan.edu"
  },
  {
    "objectID": "BasicsR.html#r-is-an-object-oriented-language",
    "href": "BasicsR.html#r-is-an-object-oriented-language",
    "title": "3  Let’s take our first ride in R",
    "section": "3.1 R is an object oriented language",
    "text": "3.1 R is an object oriented language\nA object oriented language sounds probably esoteric and strange when you first read about it. But, it is not as weird as it sounds!\nProgramming languages have different options to represent the human knowledge. Programming is after all, a human activity, therefore we always try to represent what we have in our minds. Computers are good mind metaphors, we can create objects, with characteristics, qualities, names, and properties using a programming language.\nHave you think about a simple object such a table? You see the object, you name the object and then you start realizing the table has some properties. Normally, tables can be built with something solid, and typically; a table has four legs. However, you could transform the chair, you could pull it apart and create a chair. The table object can be manipulated, you could also paint the table, or change some parts of the table when the table gets old.\nLikewise, an object in R can be created, manipulated and transformed. Also, each object will have different properties. Some objects will represent letters and numbers, others will have only numbers. We can study the next example:\n\ntable <- c(\"has four legs\", \"it is brown\", \"it is solid\")\n\nWhat happened in the above? In the code showed, you can see the word table, you will also see an arrow that looks like this <-. That arrow is called the assignment, we assign or save information in the object that I decided to name table. You are also able to notice that I wrote statements in English. These statements were now assigned to the object table.\nWe can access the information inside table by typing the word table in the RStudio console, it should look similar to this:\n\ntable\n\n[1] \"has four legs\" \"it is brown\"   \"it is solid\"  \n\n\nNotice that the console printed the information contained in table, in this case the information was [1] \"has four legs\" \"it is brown\"   \"it is solid\". In this example, we created a type of data object called vector. Vectors are the most basic object in R language. Vectors can comprise numbers, letters, or both.\nLet’s see the following example:\n\ntable <- c(4, 90, 50, \"has for legs\")\n\nIn this new example, I mixed numbers with an statement in English. We can see how the information is saved inside the object table by typing table in the console:\n\ntable\n\n[1] \"4\"            \"90\"           \"50\"           \"has for legs\"\n\n\nAja! Can you spot the differences? When you save numbers and letters together, all the elements are wrapped in quotes. This means that vectors have an important property: they can handle numbers and letters, but when you mixed them, the numbers are transformed into characters.\nIn R, characters are represented by wrapping the element using quotes. This is one of the characteristics of vector objects. Similar to objects such as tables, virtual objects have properties. For instance, tables cannot fly, that’s a property of tables 🤓.\n\n\n\n\n\n\nAssigment character shortcut\n\n\n\nPress CTRL + - to add the assignment arrow <-."
  },
  {
    "objectID": "BasicsR.html#types-of-objects",
    "href": "BasicsR.html#types-of-objects",
    "title": "3  Let’s take our first ride in R",
    "section": "3.2 Types of objects",
    "text": "3.2 Types of objects\n\n3.2.1 Vectors\nI already showed examples of vectors in the previous section. However, there are more details to mention. Objects can have different modes. In the case of vectors, you can have a vector that are mode numeric or mode character (Matloff, 2011).\n\nvector1 <- c(1,2,3,4)\nmode(vector1)\n\n[1] \"numeric\"\n\n\nIn this example I created a vector that I named vector1, this vector contains only numbers. When the vector has only numeric values the mode is numeric. I used the function mode to examine what mode was assigned to the vector.\n\nvector2 <- c(\"USA\",\"Costa Rica\",\"Jamaica\",\"Argentina\")\nmode(vector2)\n\n[1] \"character\"\n\n\nvector2 in this case has a mode character. This means that all elements in the vector are strings or characters.\n\n\n3.2.2 Matrices\nYou might remember a matrix from your high school or college math. If not, you are safe. Let me show how a matrix looks like:\n\n\\[\\begin{equation*}\n\\begin{bmatrix*}\n1 & 2 & 3\\\\\n6& 5 & 4\n\\end{bmatrix*}   \n\\end{equation*}\\]\n\nThe matrix number 1 is an example of a possible matrix. In this course we won’t use matrices. They are better used in multivariate statistics which is a more advanced topic. Nonetheless, matrices are objects that are closely related to data frames in R. We will study data frames later in this chapter.\nIn R you can create that same matrix by running this code:\n\nmatrixExample <- matrix(data = c(1,6,2,5,3,4),\n                        nrow = 2, \n                        ncol = 3, \n                        byrow = FALSE)\nmatrixExample\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    6    5    4\n\n\nA matrix has rows and columns. Each element in a matrix can be a number or it could be letters. In R, you can subset the matrix by row:\n\n## This gets the first row values.\nmatrixExample[1,]\n\n[1] 1 2 3\n\n\nOr by column:\n\n## This gets the first column values.\nmatrixExample[,1]\n\n[1] 1 6\n\n\nMatrices have particular mathematical properties, R respects these properties. However, I won’t explain the properties in this class. You just need to know that matrix is a type of object in R.\n\n\n3.2.3 Lists\nLists are probably the most useful type of object in R. It is similar to a vector, but lists are able to contain multiple objects in different modes and different types:\n\nlist_1 <- list(firstGrade = c(\"Esteban\", \"David\", \"Sofia\"),\n               secondGrade = c(\"Jenny\", \"Alex\", \"Maria\"),\n               grades_1 = c(80,90,100),\n               grades_2 = c(56,89,88))\n\nIn this example, I’m adding the names of first graders, and second graders, along with their grades. I’m combining numeric vectors with character vectors, and then I saved then in a single object named list_1. We can check how the information looks like when we print the content on the console:\n\nlist_1\n\n$firstGrade\n[1] \"Esteban\" \"David\"   \"Sofia\"  \n\n$secondGrade\n[1] \"Jenny\" \"Alex\"  \"Maria\"\n\n$grades_1\n[1]  80  90 100\n\n$grades_2\n[1] 56 89 88\n\n\n\n\n\n\n\n\nImportant\n\n\n\nPay attention to the function list() that I used in the example.\n\n\nAlso, you can see in the output that each vector is display separately as an element of the list. There is a $ dollar sign repeated in each element. The dollar sign is like a pin that helps to access a specific vector inside the list:\n\nlist_1$firstGrade\n\n[1] \"Esteban\" \"David\"   \"Sofia\"  \n\n\nIn this example I’m printing on the console the names of first graders.\n\n\n3.2.4 Data Frames\nData frame is the object that you will see the most in this course. This type of object is a bundle of several lists combined in a single object. This property allows to combine different modes (character or numeric), and helps to subset columns and rows easily. This the data type that will help use to analyze observed data in this course.\nExample:\n\ndataExample <- data.frame(firstGrade = c(\"Esteban\", \"David\", \"Sofia\"),\n               secondGrade = c(\"Jenny\", \"Alex\", \"Maria\"),\n               grades_1 = c(80,90,100),\n               grades_2 = c(56,89,88))\n\nIn this new example, I’m not using the function list(), because I replaced it with the function data.frame(). This will save the information with the following structure:\n\ndataExample\n\n  firstGrade secondGrade grades_1 grades_2\n1    Esteban       Jenny       80       56\n2      David        Alex       90       89\n3      Sofia       Maria      100       88\n\n\nAfter printing the information saved in the object, you’ll notice we have column names, also we have multiple rows. Now, this looks more like a spreadsheet in Excel.\nThe data frame looks better displayed in the following table:\n\n\n\n\n\n\n\nYou can also transform and subset data frames, for instance you can get access only to the first row:\n\ndataExample[1,] ### I'm printing only the first row\n\n  firstGrade secondGrade grades_1 grades_2\n1    Esteban       Jenny       80       56\n\n\nYou may also print only the first column:\n\ndataExample[,1] ### I'm printing only the first row\n\n[1] \"Esteban\" \"David\"   \"Sofia\"  \n\n\n\n\n\n\n\n\nMatrix and Data Frame\n\n\n\nMatrices and data frames are two dimensional objects. These objects have rows and columns. That’s why we use square brackets to subset the object by row or column. The first number in the square bracket represents rows, for instance data[1,], the second number in the square bracket represents the columns data[,1]."
  },
  {
    "objectID": "intro.html#r-installation",
    "href": "intro.html#r-installation",
    "title": "2  Installing R",
    "section": "2.1 R installation",
    "text": "2.1 R installation\nR is a programming language that can be downloaded from HERE. But, I need to explain some steps when you go there, because the webpage is not intuitive for new users.\n\n2.1.1 Step 1\nPlease click on download R when you access the webpage.\n\n\n\n2.1.2 Step 2\nYou will see a list of mirrors. Please click on any mirror, you could click on the first option. If you pick another option, the download will work fine.\n\n\n\n2.1.3 Step 3\nSelect the option that applies to your operated system.\n\n\n\n2.1.4 Step 3\nThe following pictures show the web page when you pick Windows or Mac. When you pick macOS you will have several options, but most of the Mac users should be fine by clicking R-4.2.2-arm64.pkg. If you are a Windows user click on base to download R, finally!\n\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\n\nApple\n\n\n\n\nFigure 2.1: Options to select when installing R in Windows or Mac."
  },
  {
    "objectID": "intro.html#rstudio-installation",
    "href": "intro.html#rstudio-installation",
    "title": "2  Installing R",
    "section": "2.2 RStudio installation",
    "text": "2.2 RStudio installation\nR is the programming language, and when you work with a programming language you need an editor or easy interface to program. RStudiogives friendly options to program easily in R. You don’t need to be a computer programmer to use R and Rstudio.\n\n2.2.1 Step 1\nClick here to download Rstudio. When you are there, click on Download Rstudio Desktop. See the next picture:\n\n\n\nRstudio download"
  },
  {
    "objectID": "intro.html#step-2-1",
    "href": "intro.html#step-2-1",
    "title": "2  Installing R",
    "section": "2.3 Step 2",
    "text": "2.3 Step 2\nAfter you download the RStudio installer you can install Rstudio by double clicking the installer. Follow all the prompts , the default options should be fine to start using R with RStudio."
  },
  {
    "objectID": "BasicsR.html",
    "href": "BasicsR.html",
    "title": "3  Let’s do our first ride in R",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "operations.html",
    "href": "operations.html",
    "title": "4  👩‍💻Operations and object manipulation",
    "section": "",
    "text": "I mentioned in Chapter 3 some object characteristics. I told you that objects have properties similar to objects in real life.\nIn programming languages the properties of objects will determine how and what you are able to add, subtract, transform, and merge. Objects have virtual matter!"
  },
  {
    "objectID": "operations.html#mathematical-operations-with-objects",
    "href": "operations.html#mathematical-operations-with-objects",
    "title": "4  👩‍💻Operations and object manipulation",
    "section": "4.1 Mathematical operations with objects",
    "text": "4.1 Mathematical operations with objects\n\n4.1.1 Addition\nVectors are the basic unit in R. They are everywhere in the R environment, but they have specific behaviors. For instance, you could sum vectors:\n\nv1 <- c(2,3,4,5)\n\nv2 <- c(5,6,7,8)\n\nv1 + v2\n\n[1]  7  9 11 13\n\n\nWe should examine what happened in this example. The first element in V1 was added to the first element in V2.We got the result 7. This means, R is respecting the position of the elements, the first element in one vector will be added to the first element of subsequent vectors.\nElements in a list can also be added because they are after all vectors saved all together inside the same object, like having a shopping bag with several objects:\n\nshoppingExpenses <- list(monday = c(34,56,78),\n                         tuesday =  c(56,78,90),\n                         thursday = c(56,32,89))\n\n\nshoppingExpenses$monday + shoppingExpenses$tuesday\n\n[1]  90 134 168\n\n\nWhen using lists, you need to use the dollar sign $, this is a “pin” that tells R where in the list is the object I need to manipulate. Monday, Tuesday, and Thursday are objects inside my list. In this case, I’m adding my Monday expenses to my Tuesday expenses.\nData frames also have similar properties compare to lists. In data frames you can also use dollar sign $ to declare what column you need to manipulate:\n\ngrades <- data.frame(math = c(90,80,96), \n               spanish =  c(56,89,100),\n               science = c(100,80,70))\n\ngrades$math + grades$spanish + grades$science\n\n[1] 246 249 266\n\n\nIn this example you can tell that I’m using the dollar sign $ to specify which columns I need to add together. Each element is added row-wise and it generated a result. The next figure might help to understand how R adds the values in a data frame:\n\n\n\n\n\nAt this point you might be thinking, what happens when the vectors don’t have the same length?\n\nv1 <-  c(1,25,9)\n\nv2 <- c(2,5)\n\nv1 + v2\n\nWarning in v1 + v2: longer object length is not a multiple of shorter object\nlength\n\n\n[1]  3 30 11\n\n\nR gives us a Warning because v1 and v2 don’t contain the same number of elements. This warning is telling that both objects don’t have the same dimensions. When the vectors don’t have the same dimensions, R recycles the operation. Notice that R added 1 + 2 = 3, also added 25 + 5 = 30, but there is not a third number in v2. In this case R came back to the first position and added 9 + 2 = 11.\nThis behavior in R can induce many times to multiple errors, it is recommended to work always with same length vectors.\n\n\n4.1.2 Substraction\nThe same rules explained in the case of addition apply to subtraction. You can substract in R using the minus sign -:\n\nv1 <- c(56,89,80)\n\nv2 <- c(89,33,88)\n\nv1 - v2\n\n[1] -33  56  -8\n\n\n\n\n4.1.3 Multiplication\nYou can multiply in R using asterisk *:\n\nv1 * v2 \n\n[1] 4984 2937 7040"
  },
  {
    "objectID": "operations.html#division",
    "href": "operations.html#division",
    "title": "4  👩‍💻Operations and object manipulation",
    "section": "4.2 Division",
    "text": "4.2 Division\nYou can divide in R using slash /:\n\nv1 / v2\n\n[1] 0.6292135 2.6969697 0.9090909"
  },
  {
    "objectID": "operations.html#other-important-math-operations",
    "href": "operations.html#other-important-math-operations",
    "title": "4  👩‍💻Operations and object manipulation",
    "section": "4.3 Other important math operations",
    "text": "4.3 Other important math operations\nR can work as a sophisticated calculator, it has all the mathematical functions that you can imagine and more.\nYou may check more mathematical function by CLICKING HERE"
  },
  {
    "objectID": "functionsPack.html",
    "href": "functionsPack.html",
    "title": "5  Functions and R packages",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "functionsPack.html#built-in-functions",
    "href": "functionsPack.html#built-in-functions",
    "title": "5  Functions and R packages",
    "section": "5.1 Built in functions",
    "text": "5.1 Built in functions\nI have good news! You don’t have to create new functions in this course. We will use functions already programmed by other users called “developers”. R is an open source language, any person can create new functions and allow the use of the function for free. R has many of this functions already programmed in the global environment.\nAgain, let’s see some examples:\n\nmean(mtcars$hp) ### estimates mean or average\n\n[1] 146.6875\n\n\nR also has data sets that you can use for practicing. In this example, I’m estimating the mean horse power, in the data set called mtcars. You may see the list of data set using the function data().\n\nmedian(mtcars$hp) ### Estimates the median\n\n[1] 123\n\n\nThe function median() is also an example of a built-in function in R.\nThere are many more functions in R already programmed to be used. We will study more functions according to the specific topic."
  },
  {
    "objectID": "functionsPack.html#r-packages",
    "href": "functionsPack.html#r-packages",
    "title": "5  Functions and R packages",
    "section": "5.2 R Packages",
    "text": "5.2 R Packages\nR is not a software, it is a programming language. Programming languages are made to create software. In R we call these software packages. Packages are a set of functions that allow you to simplify steps in your analysis. As a new R user in this class, you don’t need to know how to program a package, you will use packages already created by other programmers.\nPackages in R are free, but you have to install the package in your local R environment. You will have to install the package only once. All packages are available in a huge repository called CRAN (The Comprehensive R Archive Network). R is automatically connected to CRAN. You only need to install a new package typing the function install.packages():\n\ninstall.packages(\"ggplot2\")\n\nIn the code above, I’m installing a new package called ggplot2. This is a package with a lot of instructions to create beautiful plots. We will learn more about ggplot2 in the next chapters.\n\n5.2.1 Packages are like books in your shelf.\nAfter installing a package, you need to call the package every time you open a new session in R. For instance, in the next code, I’m creating a scatter plot using the package ggplot(). You will notice that I’m calling the package from the “bookshelf” using the function library(ggplot2). If you are a Pokemon fan, your package is a Pokemon, and you have to call your Pokemon to the battle field.\n\n\n\n\n\nAlso, I will plot data from the package palmerpenguins(Horst et al., 2020)\n\n\nClick here to see the packages\n### The rule is to write the packages required by your code at the beginning\n## Packages loaded or called\nlibrary(\"jpeg\")             ## reads pictures into R\nlibrary(patchwork)         ## more tools to add features in a plot\nlibrary(ggplot2)          ## creates plots\nlibrary(palmerpenguins)  ## This package has the penguin data\n\npicture <- \"penguins.jpg\"\nimg <- readJPEG(picture, native = TRUE)\n\n\n\nggplot(penguins, aes(x = flipper_length_mm, \n                     y= body_mass_g,\n                     color = species)) +\n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\" ) + \n  theme_classic() +  \n  xlab(\"Flipper Length in milimeters\")+\n  ylab(\"Body Mass in grams\")+\n  inset_element(p = img,\n                left = 0.05,\n                bottom = 0.65,\n                right = 0.5,\n                top = 0.95)"
  },
  {
    "objectID": "BasicsR.html#exercises",
    "href": "BasicsR.html#exercises",
    "title": "3  Let’s take our first ride in R",
    "section": "3.3 Exercises",
    "text": "3.3 Exercises\n\nCreate a data frame object by copying the code below. Change the object’s name, you may named it “expenses”, then change the variable names in the example. Finally run the code. How many rows does this data frame has? How many columns does this data frame has? Can you tell what happened after running the function head()?\n\n\nExample <- data.frame(variable1 = c(30,63,96),\n               variable2 = c(63,25,45),\n               variable3 = c(78,100,100),\n               variable4 = c(56,89,88))\n\nhead(Example)"
  },
  {
    "objectID": "BasicsR.html#references",
    "href": "BasicsR.html#references",
    "title": "3  Let’s take our first ride in R",
    "section": "References",
    "text": "References\n\n\n\n\nMatloff, N. (2011). The art of r programming: A tour of statistical software design. No Starch Press."
  },
  {
    "objectID": "functionsPack.html#references",
    "href": "functionsPack.html#references",
    "title": "5  Functions and R packages",
    "section": "References",
    "text": "References\n\n\n\n\nHorst, A. M., Hill, A. P., & Gorman, K. B. (2020). Palmerpenguins: Palmer archipelago (antarctica) penguin data. https://doi.org/10.5281/zenodo.3960218"
  },
  {
    "objectID": "importData.html",
    "href": "importData.html",
    "title": "6  The most important question: how do I import data?",
    "section": "",
    "text": "When you are a applied researcher or a student learning statistics, you have a question in the back of your head: how do I import data in R? After all, you will not program in R, you will be a R user."
  },
  {
    "objectID": "importData.html#working-directory",
    "href": "importData.html#working-directory",
    "title": "6  The most important question: how do I import data?",
    "section": "6.1 Working directory",
    "text": "6.1 Working directory\nProgramming languages and software always need a working space. The working space is a folder in your computer where R will try to find files needed to be opened. The working folder or directory will also be the place where R saves any information or file that you request to save from R.\nIn the next example I will specify my working directory, using the function setwd(), in this example the working folder is “labBook”:\n\nsetwd(\"C:/Users/emontenegro1/Documents/MEGA/stanStateDocuments/PSYC3000/labBook\")\n\nImportant remarks: I specify the whole path to the folder where my files will be located. Also, after copying the path in Windows, I had to change the back slash \\ for slash /. This is a step that you have to do if you are using a Windows computer. Mac users don’t need to change the path.\nIf you need to check the path to your working directory, you can run the following code:\n\ngetwd()\n\nWhen you are using RStudio you can set your working directory using the user interface. You can click on Session –> Set Working Directory –> Choose Directory.\n\n\n\n\n\n\n\nStep1\n\n\n\n\n\n\n\nStep2\n\n\n\n\nFigure 6.1: Steps to set the working directory using Rstudio’s interface.\n\n\nIf you don’t set your working directory manually, R will set your working director at your Documents folder in Windows and Mac. If you are using RStudio, the working directory by default is where you opened your code. For instance, if you open your code from the folder PSYC3000_homework. The default working directory will be PSYC3000_homework."
  },
  {
    "objectID": "importData.html#import-a-data-file",
    "href": "importData.html#import-a-data-file",
    "title": "6  The most important question: how do I import data?",
    "section": "6.2 Import a data file",
    "text": "6.2 Import a data file\nAfter setting the working directory, you are now ready to import the data you need to analyze. There are multiple functions to open specific file formats. In this course we will use mostly read.csv() function.\n\nlife_expectancy <- read.csv(\"lifeExpect.csv\")\n\nI’m importing the file named lifeExpect.csv, this file is located in my local folder. The same folder that I specify as my working directory in the previous step.\nYou might wonder, what is a .csv file? CSV stands for “comma separated values”, it is a light format to save information. It is also easy to open in any operated system. I use this format frequently because I can send the file to any student and I’m sure the file opens in any computer, tablet or cellphone.\nThe file lifeExpect is now inside our virtual space in R. It is now represented by the object life_expectancy. From now on, we need to refer to the object to get access to the information inside the external file.\nFor example, we can print the first five values of each column using the function head():\n\nhead(life_expectancy)\n\n\n\n\n\n \n  \n    Country.Name \n    Country.Code \n    X1960 \n    X1961 \n    X1962 \n    X1963 \n    X1964 \n    X1965 \n    X1966 \n    X1967 \n    X1968 \n    X1969 \n    X1970 \n    X1971 \n    X1972 \n    X1973 \n    X1974 \n    X1975 \n    X1976 \n    X1977 \n    X1978 \n    X1979 \n    X1980 \n    X1981 \n    X1982 \n    X1983 \n    X1984 \n    X1985 \n    X1986 \n    X1987 \n    X1988 \n    X1989 \n    X1990 \n    X1991 \n    X1992 \n    X1993 \n    X1994 \n    X1995 \n    X1996 \n    X1997 \n    X1998 \n    X1999 \n    X2000 \n    X2001 \n    X2002 \n    X2003 \n    X2004 \n    X2005 \n    X2006 \n    X2007 \n    X2008 \n    X2009 \n    X2010 \n    X2011 \n    X2012 \n    X2013 \n    X2014 \n    X2015 \n    X2016 \n    X2017 \n    X2018 \n    X2019 \n    X2020 \n  \n \n\n  \n    Aruba \n    ABW \n    65.66200 \n    66.07400 \n    66.44400 \n    66.78700 \n    67.11300 \n    67.43500 \n    67.76200 \n    68.09500 \n    68.43600 \n    68.78400 \n    69.14000 \n    69.49800 \n    69.85100 \n    70.19100 \n    70.51900 \n    70.83300 \n    71.14000 \n    71.44100 \n    71.73600 \n    72.02300 \n    72.29300 \n    72.53800 \n    72.75100 \n    72.92900 \n    73.07100 \n    73.18100 \n    73.26200 \n    73.32500 \n    73.37800 \n    73.42500 \n    73.46800 \n    73.50900 \n    73.54400 \n    73.57300 \n    73.59800 \n    73.62200 \n    73.64600 \n    73.67100 \n    73.70000 \n    73.73800 \n    73.78700 \n    73.85300 \n    73.93700 \n    74.03800 \n    74.15600 \n    74.28700 \n    74.42900 \n    74.57600 \n    74.7250 \n    74.87200 \n    75.01700 \n    75.15800 \n    75.29900 \n    75.44100 \n    75.58300 \n    75.72500 \n    75.86800 \n    76.01000 \n    76.15200 \n    76.29300 \n    76.43400 \n  \n  \n    Africa Eastern and Southern \n    AFE \n    42.71605 \n    43.16694 \n    43.60399 \n    44.02562 \n    44.43272 \n    44.82692 \n    45.21305 \n    45.59429 \n    45.97406 \n    46.35240 \n    46.72880 \n    47.10287 \n    47.47117 \n    47.82940 \n    48.17500 \n    48.50331 \n    48.81084 \n    49.09785 \n    49.36633 \n    49.62000 \n    49.87069 \n    50.11589 \n    50.36346 \n    50.61038 \n    50.84833 \n    51.05806 \n    51.21428 \n    51.29978 \n    51.30860 \n    51.25176 \n    51.15411 \n    51.04841 \n    50.95726 \n    50.89025 \n    50.84186 \n    50.80848 \n    50.79616 \n    50.82061 \n    50.89761 \n    51.04419 \n    51.27613 \n    51.60646 \n    52.04315 \n    52.58585 \n    53.22891 \n    53.96655 \n    54.79171 \n    55.68234 \n    56.6098 \n    57.54877 \n    58.47070 \n    59.35359 \n    60.18556 \n    60.95336 \n    61.64737 \n    62.25929 \n    62.78768 \n    63.24626 \n    63.64899 \n    64.00521 \n    64.32570 \n  \n  \n    Afghanistan \n    AFG \n    32.44600 \n    32.96200 \n    33.47100 \n    33.97100 \n    34.46300 \n    34.94800 \n    35.43000 \n    35.91400 \n    36.40300 \n    36.90000 \n    37.40900 \n    37.93000 \n    38.46100 \n    39.00300 \n    39.55800 \n    40.12800 \n    40.71500 \n    41.32000 \n    41.94400 \n    42.58500 \n    43.24400 \n    43.92300 \n    44.61700 \n    45.32400 \n    46.04000 \n    46.76100 \n    47.48600 \n    48.21100 \n    48.93000 \n    49.64000 \n    50.33100 \n    50.99900 \n    51.64100 \n    52.25600 \n    52.84200 \n    53.39800 \n    53.92400 \n    54.42400 \n    54.90600 \n    55.37600 \n    55.84100 \n    56.30800 \n    56.78400 \n    57.27100 \n    57.77200 \n    58.29000 \n    58.82600 \n    59.37500 \n    59.9300 \n    60.48400 \n    61.02800 \n    61.55300 \n    62.05400 \n    62.52500 \n    62.96600 \n    63.37700 \n    63.76300 \n    64.13000 \n    64.48600 \n    64.83300 \n    65.17300 \n  \n  \n    Africa Western and Central \n    AFW \n    37.20538 \n    37.63255 \n    38.05261 \n    38.46375 \n    38.86707 \n    39.26484 \n    39.66276 \n    40.06641 \n    40.48283 \n    40.91421 \n    41.36512 \n    41.83721 \n    42.32704 \n    42.82908 \n    43.33922 \n    43.85504 \n    44.37397 \n    44.89223 \n    45.40268 \n    45.89748 \n    46.36610 \n    46.79829 \n    47.18862 \n    47.53399 \n    47.83054 \n    48.07938 \n    48.28458 \n    48.45413 \n    48.59742 \n    48.71923 \n    48.81700 \n    48.88593 \n    48.92342 \n    48.93371 \n    48.92551 \n    48.90994 \n    48.89988 \n    48.90913 \n    48.95534 \n    49.05264 \n    49.21971 \n    49.47514 \n    49.81693 \n    50.23943 \n    50.73342 \n    51.28349 \n    51.86820 \n    52.46396 \n    53.0495 \n    53.61209 \n    54.14431 \n    54.65000 \n    55.13894 \n    55.61899 \n    56.08827 \n    56.54201 \n    56.97476 \n    57.38236 \n    57.76235 \n    58.11572 \n    58.44595 \n  \n  \n    Angola \n    AGO \n    37.52400 \n    37.81100 \n    38.11300 \n    38.43000 \n    38.76000 \n    39.10200 \n    39.45400 \n    39.81300 \n    40.17800 \n    40.54600 \n    40.91400 \n    41.28200 \n    41.65000 \n    42.01600 \n    42.37400 \n    42.72100 \n    43.05300 \n    43.36700 \n    43.66000 \n    43.93100 \n    44.17800 \n    44.40400 \n    44.61100 \n    44.79900 \n    44.96600 \n    45.10700 \n    45.21300 \n    45.28300 \n    45.31700 \n    45.32400 \n    45.30600 \n    45.27100 \n    45.23000 \n    45.20100 \n    45.20100 \n    45.24600 \n    45.35000 \n    45.51900 \n    45.76300 \n    46.09300 \n    46.52200 \n    47.05900 \n    47.70200 \n    48.44000 \n    49.26300 \n    50.16500 \n    51.14300 \n    52.17700 \n    53.2430 \n    54.31100 \n    55.35000 \n    56.33000 \n    57.23600 \n    58.05400 \n    58.77600 \n    59.39800 \n    59.92500 \n    60.37900 \n    60.78200 \n    61.14700 \n    61.48700 \n  \n  \n    Albania \n    ALB \n    62.28300 \n    63.30100 \n    64.19000 \n    64.91400 \n    65.46300 \n    65.85000 \n    66.11000 \n    66.30400 \n    66.48700 \n    66.68900 \n    66.93500 \n    67.23700 \n    67.58200 \n    67.95300 \n    68.34300 \n    68.73600 \n    69.11000 \n    69.44800 \n    69.74200 \n    69.99100 \n    70.20800 \n    70.41600 \n    70.63500 \n    70.87600 \n    71.13400 \n    71.38800 \n    71.60500 \n    71.76000 \n    71.84300 \n    71.86000 \n    71.83600 \n    71.80300 \n    71.80200 \n    71.86000 \n    71.99200 \n    72.20500 \n    72.49500 \n    72.83800 \n    73.20800 \n    73.58700 \n    73.95500 \n    74.28800 \n    74.57900 \n    74.82800 \n    75.03900 \n    75.22800 \n    75.42300 \n    75.64600 \n    75.9120 \n    76.22100 \n    76.56200 \n    76.91400 \n    77.25200 \n    77.55400 \n    77.81300 \n    78.02500 \n    78.19400 \n    78.33300 \n    78.45800 \n    78.57300 \n    78.68600 \n  \n\n\n\n\n\nThere is another option to import your data set in R, you may use the following code:\n\nlife_expectancy <- read.csv(file.choose())\n\nThis options includes the function file.choose() inside the function read.csv(), yes that’s correct. Functions can be nested inside other functions.\nfile.choose() will open a new window where you can select the file you need to import:"
  }
]